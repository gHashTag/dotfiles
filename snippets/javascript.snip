snippet rpc
  import React, { PureComponent } from 'react'
  import { View, Text } from 'react-native'

	class ${1:ClassName} extends PureComponent {
		render() {
			return (
				<View>
          <Text>Hello ${2}</Text>
        </View>
			)
		}
	}

	export default $1

snippet rfc
  import React from 'react'
  import { StyleSheet, View } from 'react-native'

	const ${1:function_name} = ({${2}}) => {
    const { container } = styles
    return (
      <View style={container}>${0:${VISUAL}}
      </View>
    )
	}

  const styles = StyleSheet.create({
    container: {
      justifyContent: 'center',
      alignItems: 'center',
      backgroundColor: '#fff'
    }
  })

	export { $1 }

snippet if
  if (${1:true}) {
    ${0:TARGET}
  }

snippet const
abbr c 
	const ${1} = ${0}

snippet if-else
abbr ife
  if (${1:#:condition}) {
    ${2:TARGET}
  } else {
    ${3}
  }

snippet for
  for (var ${1:i} = 0 $1 < ${2:#:Things}.length ++$1) {
    ${0:TARGET}
  }

snippet while
  while (${1:true}) {
    ${0:TARGET}
  }

snippet switch
  switch (${1:#:var}) {
    case ${2:#:val}:
      ${0:TARGET}
      break
  }

snippet try
  try {
    ${1:TARGET}
  } catch (${2:e}) {
    ${3}
  }

snippet console.log
alias cl
options head
  console.log('${1:TARGET}', $1)

snippet     import
abbr        import { member, ... } from "module-name"
options     head
  import { ${1:MEMBERS} } from '${0:TARGET}'

snippet ed
alias ed
abbr        export default 
options     head
	export default ${0:TARGET}

snippet =>
alias => 
abbr        () => {} 
options     head
	(${1}) => {
		${0:${VISUAL}}
	}

snippet c=>
alias c=> 
options     head
	const ${1:function_name} = (${2}) => {
		${0:${VISUAL}}
	}

snippet caf
alias caf 
options     head
	const ${1:function_name} = (${2}) => {
		${0:${VISUAL}}
	}

snippet ir
	import React from 'react'

snippet irp
	import React, { PureComponent } from 'react'

snippet ird
	import ReactDOM from 'react-dom'

snippet cdm
	componentDidMount() {
		${1}
	}

snippet cdup
	componentDidUpdate(prevProps, prevState) {
		${1}
	}

snippet cwm
	componentWillMount() {
		${1}
	}

snippet cwr
	componentWillReceiveProps(nextProps) {
		${1}
	}
  
snippet scu
	shouldComponentUpdate(nextProps, nextState) {
		${1}
	}

snippet cwun
	componentWillUnmount() {
		${1}
	}

snippet cwu
	componentWillUpdate(nextProps, nextState) {
		${1}
	}

snippet fup
	forceUpdate(${1:callback})

snippet dp
	static defaultProps = {
		${1}: ${2},
	}

snippet st
	state = {
		${1}: ${2},
	}

snippet pt
	static propTypes = {
		${1}: React.PropTypes.${2:type},
	}

snippet rdr
	ReactDOM.render(${1}, ${2})

snippet ren
	render() {
		return (
			${1:<View></View>}
		)
	}

snippet sst
	this.setState({
		${1}: ${2}
	})

snippet prp i
	this.props.${1}

snippet ste i
	this.state.${1}
